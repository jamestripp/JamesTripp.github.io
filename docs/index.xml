<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>James Tripp</title>
<link>https://jamestripp.net/index.html</link>
<atom:link href="https://jamestripp.net/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-0.9.466</generator>
<lastBuildDate>Fri, 27 May 2022 23:00:00 GMT</lastBuildDate>
<item>
  <title>Downloading Github Commits</title>
  <dc:creator>James Tripp</dc:creator>
  <link>https://jamestripp.net/posts/github-api-commits/index.html</link>
  <description><![CDATA[ 



<p>Code repository commits are informative.</p>
<p>The code for much of the software I use lives on <a href="https://github.com">Github</a>. People are continually editing and uploading contributions to the different projects. I think we could learn a lot about a community from looking at who commits and what they commit to.</p>
<p>The GitHub api makes it easy to download commits with their API. A list of JSON objects can be downloaded using their API. The format for the API is</p>
<p>https://api.github.com/repos/{user/organisation}/{repo}/commits?pages={page_number}</p>
<p>so we can see the most recent commits to the Omeka S project by going to the page below.</p>
<p>https://api.github.com/repos/omeka/omeka-s/commits?page=1</p>
<p>To download the page in Python we use our old friends requests and json to parse the page.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> requests</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"></span>
<span id="cb1-5">url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"https://api.github.com/repos/omeka/omeka-s/commits?page=1"</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">resp <span class="op" style="color: #5E5E5E;">=</span> requests.get(url)</span>
<span id="cb1-8"></span>
<span id="cb1-9">json_list <span class="op" style="color: #5E5E5E;">=</span> json.loads(resp.text)</span></code></pre></div>
</div>
<p>For this toy example, it’s easier to go through the json list and pick out the author and date.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> filter_json(data: json) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">dict</span>:</span>
<span id="cb2-2">    out <span class="op" style="color: #5E5E5E;">=</span> data[<span class="st" style="color: #20794D;">"commit"</span>][<span class="st" style="color: #20794D;">"author"</span>]</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;">return</span> out</span>
<span id="cb2-4"></span>
<span id="cb2-5">result <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb2-6"><span class="cf" style="color: #003B4F;">for</span> json_item <span class="kw" style="color: #003B4F;">in</span> json_list:</span>
<span id="cb2-7">    result.append(</span>
<span id="cb2-8">        filter_json(json_item)</span>
<span id="cb2-9">        )</span>
<span id="cb2-10"></span>
<span id="cb2-11">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(result)</span></code></pre></div>
</div>
<p>Who has made the most commits looking at only the most recent 30 commits?</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">pd.pivot_table(</span>
<span id="cb3-2">    df,</span>
<span id="cb3-3">    index <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'name'</span>,</span>
<span id="cb3-4">    values <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'date'</span>,</span>
<span id="cb3-5">    aggfunc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'count'</span></span>
<span id="cb3-6">    )</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>date</th>
    </tr>
    <tr>
      <th>name</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Alex Dryden</th>
      <td>1</td>
    </tr>
    <tr>
      <th>Jim Safley</th>
      <td>2</td>
    </tr>
    <tr>
      <th>John Flatness</th>
      <td>25</td>
    </tr>
    <tr>
      <th>Kim Nguyen</th>
      <td>1</td>
    </tr>
    <tr>
      <th>ManOnDaMoon</th>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>As a plot (as if we need it…)</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">from</span> matplotlib <span class="im" style="color: #00769E;">import</span> pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb4-2">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb4-3"></span>
<span id="cb4-4">df[<span class="st" style="color: #20794D;">'name'</span>].value_counts().plot(</span>
<span id="cb4-5">    ax<span class="op" style="color: #5E5E5E;">=</span>ax,</span>
<span id="cb4-6">    kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bar'</span>,</span>
<span id="cb4-7">    xlabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Users'</span>,</span>
<span id="cb4-8">    ylabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Commit Frequency'</span></span>
<span id="cb4-9">    )</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;AxesSubplot:xlabel='Users', ylabel='Commit Frequency'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://jamestripp.net/posts/github-api-commits/index_files/figure-html/cell-5-output-2.png" width="585" height="511"></p>
</div>
</div>
<p>John Flatness is clearly leading. Though there are lots of caveats:</p>
<ul>
<li>Does this hold true across the project history?</li>
<li>Are the commits all the same size? If not, then how do we weight commits of different size?</li>
</ul>
<p>etc.</p>
<p>Though it is a start.</p>



 ]]></description>
  <category>visualisation</category>
  <category>code</category>
  <category>api</category>
  <guid>https://jamestripp.net/posts/github-api-commits/index.html</guid>
  <pubDate>Fri, 27 May 2022 23:00:00 GMT</pubDate>
</item>
</channel>
</rss>
