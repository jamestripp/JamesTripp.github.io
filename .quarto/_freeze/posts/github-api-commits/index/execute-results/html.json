{
  "hash": "a36e06d891608c7c57ea11e77141e556",
  "result": {
    "markdown": "---\ntitle: \"Downloading Github Commits\"\nauthor: \"James Tripp\"\ndate: \"2022-05-28\"\ncategories: [visualisation, code, api]\n---\n\nCode repository commits are informative.\n\nThe code for much of the software I use lives on [Github](https://github.com). People are continually editing and uploading contributions to the different projects. I think we could learn a lot about a community from looking at who commits and what they commit to.\n\nThe GitHub api makes it easy to download commits with their API. A list of JSON objects can be downloaded using their API. The format for the API is\n\nhttps://api.github.com/repos/{user/organisation}/{repo}/commits?pages={page_number}\n\nso we can see the most recent commits to the Omeka S project by going to the page below.\n\nhttps://api.github.com/repos/omeka/omeka-s/commits?page=1\n\n\nTo download the page in Python we use our old friends requests and json to parse the page.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport requests\nimport json\nimport pandas as pd\n\nurl = \"https://api.github.com/repos/omeka/omeka-s/commits?page=1\"\n\nresp = requests.get(url)\n\njson_list = json.loads(resp.text)\n```\n:::\n\n\nFor this toy example, it's easier to go through the json list and pick out the author and date.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef filter_json(data: json) -> dict:\n    out = data[\"commit\"][\"author\"]\n    return out\n\nresult = []\nfor json_item in json_list:\n    result.append(\n        filter_json(json_item)\n        )\n\ndf = pd.DataFrame(result)\n```\n:::\n\n\nWho has made the most commits looking at only the most recent 30 commits?\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npd.pivot_table(\n    df,\n    index = 'name',\n    values = 'date',\n    aggfunc='count'\n    )\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Alex Dryden</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Jim Safley</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>John Flatness</th>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>Kim Nguyen</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>ManOnDaMoon</th>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAs a plot (as if we need it...)\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfrom matplotlib import pyplot as plt\nfig, ax = plt.subplots()\n\ndf['name'].value_counts().plot(\n    ax=ax,\n    kind='bar',\n    xlabel='Users',\n    ylabel='Commit Frequency'\n    )\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<AxesSubplot:xlabel='Users', ylabel='Commit Frequency'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-2.png){width=585 height=511}\n:::\n:::\n\n\nJohn Flatness is clearly leading. Though there are lots of caveats:\n\n* Does this hold true across the project history?\n* Are the commits all the same size? If not, then how do we weight commits of different size?\n\netc.\n\nThough it is a start.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}